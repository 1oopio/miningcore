syntax = "proto3";
package protowire;

option csharp_namespace = "Miningcore.Blockchain.Kaspa.RPC.Messages";

// ---------------- P2P

message RequestAddressesMessage{
  bool includeAllSubnetworks = 1;
  SubnetworkId subnetworkId = 2;
}

message AddressesMessage{
  repeated NetAddress addressList = 1;
}

message NetAddress{
  int64 timestamp = 1;
  bytes ip = 3;
  uint32 port = 4;
}

message SubnetworkId{
  bytes bytes = 1;
}

message TransactionMessage{
  uint32 version = 1;
  repeated TransactionInput inputs = 2;
  repeated TransactionOutput outputs = 3;
  uint64 lockTime = 4;
  SubnetworkId subnetworkId = 5;
  uint64 gas = 6;
  bytes payload = 8;
}

message TransactionInput{
  Outpoint previousOutpoint = 1;
  bytes signatureScript = 2;
  uint64 sequence = 3;
  uint32 sigOpCount = 4;
}

message Outpoint{
  TransactionId transactionId = 1;
  uint32 index = 2;
}

message TransactionId{
  bytes bytes = 1;
}
message ScriptPublicKey {
  bytes script = 1;
  uint32 version = 2;
}

message TransactionOutput{
  uint64 value = 1;
  ScriptPublicKey scriptPublicKey = 2;
}

message BlockMessage{
  BlockHeader header = 1;
  repeated TransactionMessage transactions = 2;
}

message BlockHeader{
  uint32 version = 1;
  repeated BlockLevelParents parents = 12;
  Hash hashMerkleRoot = 3;
  Hash acceptedIdMerkleRoot = 4;
  Hash utxoCommitment = 5;
  int64 timestamp = 6;
  uint32 bits = 7;
  uint64 nonce = 8;
  uint64 daaScore = 9;
  bytes blueWork = 10;
  Hash pruningPoint = 14;
  uint64 blueScore = 13;
}

message BlockLevelParents {
  repeated Hash parentHashes = 1;
}

message Hash{
  bytes bytes = 1;
}

message RequestBlockLocatorMessage{
  Hash highHash = 1;
  uint32 limit = 2;
}

message BlockLocatorMessage{
  repeated Hash hashes = 1;
}

message RequestHeadersMessage{
  Hash lowHash = 1;
  Hash highHash = 2;
}

message RequestNextHeadersMessage{
}

message DoneHeadersMessage{
}

message RequestRelayBlocksMessage{
  repeated Hash hashes = 1;
}

message RequestTransactionsMessage {
  repeated TransactionId ids = 1;
}

message TransactionNotFoundMessage{
  TransactionId id = 1;
}

message InvRelayBlockMessage{
  Hash hash = 1;
}

message InvTransactionsMessage{
  repeated TransactionId ids = 1;
}

message PingMessage{
  uint64 nonce = 1;
}

message PongMessage{
  uint64 nonce = 1;
}

message VerackMessage{
}

message VersionMessage{
  uint32 protocolVersion = 1;
  uint64 services = 2;
  int64 timestamp = 3;
  NetAddress address = 4;
  bytes id = 5;
  string userAgent = 6;
  bool disableRelayTx = 8;
  SubnetworkId subnetworkId = 9;
  string network = 10;
}

message RejectMessage{
  string reason = 1;
}

message RequestPruningPointUTXOSetMessage{
  Hash pruningPointHash = 1;
}

message PruningPointUtxoSetChunkMessage{
  repeated OutpointAndUtxoEntryPair outpointAndUtxoEntryPairs = 1;
}

message OutpointAndUtxoEntryPair{
  Outpoint outpoint = 1;
  UtxoEntry utxoEntry = 2;
}

message UtxoEntry {
  uint64 amount = 1;
  ScriptPublicKey scriptPublicKey = 2;
  uint64 blockDaaScore = 3;
  bool isCoinbase = 4;
}

message RequestNextPruningPointUtxoSetChunkMessage {
}

message DonePruningPointUtxoSetChunksMessage {
}

message RequestIBDBlocksMessage{
  repeated Hash hashes = 1;
}

message UnexpectedPruningPointMessage{
}

message IbdBlockLocatorMessage {
  Hash targetHash = 1;
  repeated Hash blockLocatorHashes = 2;
}

message RequestIBDChainBlockLocatorMessage{
  Hash lowHash = 1;
  Hash highHash = 2;
}

message IbdChainBlockLocatorMessage {
  repeated Hash blockLocatorHashes = 1;
}

message RequestAnticoneMessage{
  Hash blockHash = 1;
  Hash contextHash = 2;
}

message IbdBlockLocatorHighestHashMessage {
  Hash highestHash = 1;
}

message IbdBlockLocatorHighestHashNotFoundMessage {
}

message BlockHeadersMessage {
  repeated BlockHeader blockHeaders = 1;
}

message RequestPruningPointAndItsAnticoneMessage {
}

message RequestNextPruningPointAndItsAnticoneBlocksMessage{
}

message BlockWithTrustedDataMessage {
  BlockMessage block = 1;
  uint64 daaScore = 2;
  repeated DaaBlock daaWindow = 3;
  repeated BlockGhostdagDataHashPair ghostdagData = 4;
}

message DaaBlock {
  BlockMessage block = 3;
  GhostdagData ghostdagData = 2;
}

message DaaBlockV4 {
  BlockHeader header = 1;
  GhostdagData ghostdagData = 2;
}

message BlockGhostdagDataHashPair {
  Hash hash = 1;
  GhostdagData ghostdagData = 2;
}

message GhostdagData {
  uint64 blueScore = 1;
  bytes blueWork = 2;
  Hash selectedParent = 3;
  repeated Hash mergeSetBlues = 4;
  repeated Hash mergeSetReds = 5;
  repeated BluesAnticoneSizes bluesAnticoneSizes = 6;
}

message BluesAnticoneSizes {
  Hash blueHash = 1;
  uint32 anticoneSize = 2;
}

message DoneBlocksWithTrustedDataMessage {
}

message PruningPointsMessage {
  repeated BlockHeader headers = 1;
}

message RequestPruningPointProofMessage {
}

message PruningPointProofMessage {
  repeated PruningPointProofHeaderArray headers = 1;
}

message PruningPointProofHeaderArray {
  repeated BlockHeader headers = 1;
}

message ReadyMessage {
}

message BlockWithTrustedDataV4Message {
  BlockMessage block = 1;
  repeated uint64 daaWindowIndices = 2;
  repeated uint64 ghostdagDataIndices = 3;
}

message TrustedDataMessage {
  repeated DaaBlockV4 daaWindow = 1;
  repeated BlockGhostdagDataHashPair ghostdagData = 2;
}


// --------------------

// ---------------- RPC

// RPCError represents a generic non-internal error.
//
// Receivers of any ResponseMessage are expected to check whether its error field is not null.
message RPCError{
  string message = 1;
}

message RpcBlock {
  RpcBlockHeader header = 1;
  repeated RpcTransaction transactions = 2;
  RpcBlockVerboseData verboseData = 3;
}

message RpcBlockHeader {
  uint32 version = 1;
  repeated RpcBlockLevelParents parents = 12;
  string hashMerkleRoot = 3;
  string acceptedIdMerkleRoot = 4;
  string utxoCommitment = 5;
  int64 timestamp = 6;
  uint32 bits = 7;
  uint64 nonce = 8;
  uint64 daaScore = 9;
  string blueWork = 10;
  string pruningPoint = 14;
  uint64 blueScore = 13;
}

message RpcBlockLevelParents {
  repeated string parentHashes = 1;
}

message RpcBlockVerboseData{
  string hash = 1;
  double difficulty = 11;
  string selectedParentHash = 13;
  repeated string transactionIds = 14;
  bool isHeaderOnly = 15;
  uint64 blueScore = 16;
  repeated string childrenHashes = 17;
  repeated string mergeSetBluesHashes = 18;
  repeated string mergeSetRedsHashes = 19;
  bool isChainBlock = 20;
}

message RpcTransaction {
  uint32 version = 1;
  repeated RpcTransactionInput inputs = 2;
  repeated RpcTransactionOutput outputs = 3;
  uint64 lockTime = 4;
  string subnetworkId = 5;
  uint64 gas = 6;
  string payload = 8;
  RpcTransactionVerboseData verboseData = 9;
}

message RpcTransactionInput {
  RpcOutpoint previousOutpoint = 1;
  string signatureScript = 2;
  uint64 sequence = 3;
  uint32 sigOpCount = 5;
  RpcTransactionInputVerboseData verboseData = 4;
}

message RpcScriptPublicKey {
  uint32 version = 1;
  string scriptPublicKey = 2;
}

message RpcTransactionOutput {
  uint64 amount = 1;
  RpcScriptPublicKey scriptPublicKey = 2;
  RpcTransactionOutputVerboseData verboseData = 3;
}

message RpcOutpoint {
  string transactionId = 1;
  uint32 index = 2;
}

message RpcUtxoEntry {
  uint64 amount = 1;
  RpcScriptPublicKey scriptPublicKey = 2;
  uint64 blockDaaScore = 3;
  bool isCoinbase = 4;
}

message RpcTransactionVerboseData{
  string transactionId = 1;
  string hash = 2;
  uint64 mass = 4;
  string blockHash = 12;
  uint64 blockTime = 14;
}

message RpcTransactionInputVerboseData{
}

message RpcTransactionOutputVerboseData{
  string scriptPublicKeyType = 5;
  string scriptPublicKeyAddress = 6;
}

// GetCurrentNetworkRequestMessage requests the network kaspad is currently running against.
//
// Possible networks are: Mainnet, Testnet, Simnet, Devnet
message GetCurrentNetworkRequestMessage{
}

message GetCurrentNetworkResponseMessage{
  string currentNetwork = 1;
  RPCError error = 1000;
}

// SubmitBlockRequestMessage requests to submit a block into the DAG.
// Blocks are generally expected to have been generated using the getBlockTemplate call.
//
// See: GetBlockTemplateRequestMessage
message SubmitBlockRequestMessage{
  RpcBlock block = 2;
  bool allowNonDAABlocks = 3;
}

message SubmitBlockResponseMessage{
  enum RejectReason {
    NONE = 0;
    BLOCK_INVALID = 1;
    IS_IN_IBD = 2;
  }
  RejectReason rejectReason = 1;
  RPCError error = 1000;
}

// GetBlockTemplateRequestMessage requests a current block template.
// Callers are expected to solve the block template and submit it using the submitBlock call
//
// See: SubmitBlockRequestMessage
message GetBlockTemplateRequestMessage{
  // Which kaspa address should the coinbase block reward transaction pay into
  string payAddress = 1;
  string extraData = 2;
}

message GetBlockTemplateResponseMessage{
  RpcBlock block = 3;

  // Whether kaspad thinks that it's synced.
  // Callers are discouraged (but not forbidden) from solving blocks when kaspad is not synced.
  // That is because when kaspad isn't in sync with the rest of the network there's a high
  // chance the block will never be accepted, thus the solving effort would have been wasted.
  bool isSynced = 2;

  RPCError error = 1000;
}

// NotifyBlockAddedRequestMessage registers this connection for blockAdded notifications.
//
// See: BlockAddedNotificationMessage
message NotifyBlockAddedRequestMessage{
}

message NotifyBlockAddedResponseMessage{
  RPCError error = 1000;
}

// BlockAddedNotificationMessage is sent whenever a blocks has been added (NOT accepted)
// into the DAG.
//
// See: NotifyBlockAddedRequestMessage
message BlockAddedNotificationMessage{
  RpcBlock block = 3;
}

// GetPeerAddressesRequestMessage requests the list of known kaspad addresses in the
// current network. (mainnet, testnet, etc.)
message GetPeerAddressesRequestMessage{
}

message GetPeerAddressesResponseMessage{
  repeated GetPeerAddressesKnownAddressMessage addresses = 1;
  repeated GetPeerAddressesKnownAddressMessage bannedAddresses = 2;
  RPCError error = 1000;
}

message GetPeerAddressesKnownAddressMessage {
  string Addr = 1;
}

// GetSelectedTipHashRequestMessage requests the hash of the current virtual's
// selected parent.
message GetSelectedTipHashRequestMessage{
}

message GetSelectedTipHashResponseMessage{
  string selectedTipHash = 1;
  RPCError error = 1000;
}

// GetMempoolEntryRequestMessage requests information about a specific transaction
// in the mempool.
message GetMempoolEntryRequestMessage{
  // The transaction's TransactionID.
  string txId = 1;
  bool includeOrphanPool = 2;
  bool filterTransactionPool = 3;
}

message GetMempoolEntryResponseMessage{
  MempoolEntry entry = 1;

  RPCError error = 1000;
}

// GetMempoolEntriesRequestMessage requests information about all the transactions
// currently in the mempool.
message GetMempoolEntriesRequestMessage{
        bool includeOrphanPool = 1;
        bool filterTransactionPool = 2;
}

message GetMempoolEntriesResponseMessage{
  repeated MempoolEntry entries = 1;

  RPCError error = 1000;
}

message MempoolEntry{
  uint64 fee = 1;
  RpcTransaction transaction = 3;
  bool isOrphan = 4;
}

// GetConnectedPeerInfoRequestMessage requests information about all the p2p peers
// currently connected to this kaspad.
message GetConnectedPeerInfoRequestMessage{
}

message GetConnectedPeerInfoResponseMessage{
  repeated GetConnectedPeerInfoMessage infos = 1;
  RPCError error = 1000;
}

message GetConnectedPeerInfoMessage{
  string id = 1;
  string address = 2;

  // How long did the last ping/pong exchange take
  int64 lastPingDuration = 3;

  // Whether this kaspad initiated the connection
  bool isOutbound = 6;
  int64 timeOffset = 7;
  string userAgent = 8;

  // The protocol version that this peer claims to support
  uint32 advertisedProtocolVersion = 9;

  // The timestamp of when this peer connected to this kaspad
  int64 timeConnected = 10;

  // Whether this peer is the IBD peer (if IBD is running)
  bool isIbdPeer = 11;
}

// AddPeerRequestMessage adds a peer to kaspad's outgoing connection list.
// This will, in most cases, result in kaspad connecting to said peer.
message AddPeerRequestMessage{
  string address = 1;

  // Whether to keep attempting to connect to this peer after disconnection
  bool isPermanent = 2;
}

message AddPeerResponseMessage{
  RPCError error = 1000;
}

// SubmitTransactionRequestMessage submits a transaction to the mempool
message SubmitTransactionRequestMessage{
  RpcTransaction transaction = 1;
  bool allowOrphan = 2;
}

message SubmitTransactionResponseMessage{
  // The transaction ID of the submitted transaction
  string transactionId = 1;

  RPCError error = 1000;
}

// NotifyVirtualSelectedParentChainChangedRequestMessage registers this connection for virtualSelectedParentChainChanged notifications.
//
// See: VirtualSelectedParentChainChangedNotificationMessage
message NotifyVirtualSelectedParentChainChangedRequestMessage{
  bool includeAcceptedTransactionIds = 1;
}

message NotifyVirtualSelectedParentChainChangedResponseMessage{
  RPCError error = 1000;
}

// VirtualSelectedParentChainChangedNotificationMessage is sent whenever the DAG's selected parent
// chain had changed.
//
// See: NotifyVirtualSelectedParentChainChangedRequestMessage
message VirtualSelectedParentChainChangedNotificationMessage{
  // The chain blocks that were removed, in high-to-low order
  repeated string removedChainBlockHashes = 1;

  // The chain blocks that were added, in low-to-high order
  repeated string addedChainBlockHashes = 3;

  // Will be filled only if `includeAcceptedTransactionIds = true` in the notify request.
  repeated AcceptedTransactionIds acceptedTransactionIds = 2;
}

// GetBlockRequestMessage requests information about a specific block
message GetBlockRequestMessage{
  // The hash of the requested block
  string hash = 1;

  // Whether to include transaction data in the response
  bool includeTransactions = 3;
}

message GetBlockResponseMessage{
  RpcBlock block = 3;
  RPCError error = 1000;
}

// GetSubnetworkRequestMessage requests information about a specific subnetwork
//
// Currently unimplemented
message GetSubnetworkRequestMessage{
  string subnetworkId = 1;
}

message GetSubnetworkResponseMessage{
  uint64 gasLimit = 1;
  RPCError error = 1000;
}

// GetVirtualSelectedParentChainFromBlockRequestMessage requests the virtual selected
// parent chain from some startHash to this kaspad's current virtual
message GetVirtualSelectedParentChainFromBlockRequestMessage{
  string startHash = 1;
  bool includeAcceptedTransactionIds = 2;
}

message AcceptedTransactionIds{
  string acceptingBlockHash = 1;
  repeated string acceptedTransactionIds = 2;
}

message GetVirtualSelectedParentChainFromBlockResponseMessage{
  // The chain blocks that were removed, in high-to-low order
  repeated string removedChainBlockHashes = 1;

  // The chain blocks that were added, in low-to-high order
  repeated string addedChainBlockHashes = 3;

  // The transactions accepted by each block in addedChainBlockHashes.
  // Will be filled only if `includeAcceptedTransactionIds = true` in the request.
  repeated AcceptedTransactionIds acceptedTransactionIds = 2;

  RPCError error = 1000;
}

// GetBlocksRequestMessage requests blocks between a certain block lowHash up to this
// kaspad's current virtual.
message GetBlocksRequestMessage{
  string lowHash = 1;
  bool includeBlocks = 2;
  bool includeTransactions = 3;
}

message GetBlocksResponseMessage{
  repeated string blockHashes = 4;
  repeated RpcBlock blocks = 3;
  RPCError error = 1000;
}

// GetBlockCountRequestMessage requests the current number of blocks in this kaspad.
// Note that this number may decrease as pruning occurs.
message GetBlockCountRequestMessage{
}

message GetBlockCountResponseMessage{
  uint64 blockCount = 1;
  uint64 headerCount = 2;
  RPCError error = 1000;
}

// GetBlockDagInfoRequestMessage requests general information about the current state
// of this kaspad's DAG.
message GetBlockDagInfoRequestMessage{
}

message GetBlockDagInfoResponseMessage{
  string networkName = 1;
  uint64 blockCount = 2;
  uint64 headerCount = 3;
  repeated string tipHashes = 4;
  double difficulty = 5;
  int64 pastMedianTime = 6;
  repeated string virtualParentHashes = 7;
  string pruningPointHash = 8;
  uint64 virtualDaaScore = 9;
  RPCError error = 1000;
}

message ResolveFinalityConflictRequestMessage{
  string finalityBlockHash = 1;
}

message ResolveFinalityConflictResponseMessage{
  RPCError error = 1000;
}

message NotifyFinalityConflictsRequestMessage{
}

message NotifyFinalityConflictsResponseMessage{
  RPCError error = 1000;
}

message FinalityConflictNotificationMessage{
  string violatingBlockHash = 1;
}

message FinalityConflictResolvedNotificationMessage{
  string finalityBlockHash = 1;
}

// ShutDownRequestMessage shuts down this kaspad.
message ShutDownRequestMessage{
}

message ShutDownResponseMessage{
  RPCError error = 1000;
}

// GetHeadersRequestMessage requests headers between the given startHash and the
// current virtual, up to the given limit.
message GetHeadersRequestMessage{
  string startHash = 1;
  uint64 limit = 2;
  bool isAscending = 3;
}

message GetHeadersResponseMessage{
  repeated string headers = 1;
  RPCError error = 1000;
}

// NotifyUtxosChangedRequestMessage registers this connection for utxoChanged notifications
// for the given addresses.
//
// This call is only available when this kaspad was started with `--utxoindex`
//
// See: UtxosChangedNotificationMessage
message NotifyUtxosChangedRequestMessage {
  repeated string addresses = 1; // Leave empty to get all updates
}

message NotifyUtxosChangedResponseMessage {
  RPCError error = 1000;
}

// UtxosChangedNotificationMessage is sent whenever the UTXO index had been updated.
//
// See: NotifyUtxosChangedRequestMessage
message UtxosChangedNotificationMessage {
  repeated UtxosByAddressesEntry added = 1;
  repeated UtxosByAddressesEntry removed = 2;
}

message UtxosByAddressesEntry {
  string address = 1;
  RpcOutpoint outpoint = 2;
  RpcUtxoEntry utxoEntry = 3;
}

// StopNotifyingUtxosChangedRequestMessage unregisters this connection for utxoChanged notifications
// for the given addresses.
//
// This call is only available when this kaspad was started with `--utxoindex`
//
// See: UtxosChangedNotificationMessage
message StopNotifyingUtxosChangedRequestMessage {
  repeated string addresses = 1;
}

message StopNotifyingUtxosChangedResponseMessage {
  RPCError error = 1000;
}

// GetUtxosByAddressesRequestMessage requests all current UTXOs for the given kaspad addresses
//
// This call is only available when this kaspad was started with `--utxoindex`
message GetUtxosByAddressesRequestMessage {
  repeated string addresses = 1;
}

message GetUtxosByAddressesResponseMessage {
  repeated UtxosByAddressesEntry entries = 1;

  RPCError error = 1000;
}

// GetBalanceByAddressRequest returns the total balance in unspent transactions towards a given address
// 
// This call is only available when this kaspad was started with `--utxoindex`
message GetBalanceByAddressRequestMessage {
  string address = 1;
}

message GetBalanceByAddressResponseMessage {
  uint64 balance = 1;

  RPCError error = 1000;
}

message GetBalancesByAddressesRequestMessage {
  repeated string addresses = 1;
}

message BalancesByAddressEntry{
  string address = 1;
  uint64 balance = 2;

  RPCError error = 1000;
}

message GetBalancesByAddressesResponseMessage {
  repeated BalancesByAddressEntry entries = 1;

  RPCError error = 1000;
}

// GetVirtualSelectedParentBlueScoreRequestMessage requests the blue score of the current selected parent
// of the virtual block.
message GetVirtualSelectedParentBlueScoreRequestMessage {
}

message GetVirtualSelectedParentBlueScoreResponseMessage {
  uint64 blueScore = 1;

  RPCError error = 1000;
}

// NotifyVirtualSelectedParentBlueScoreChangedRequestMessage registers this connection for
// virtualSelectedParentBlueScoreChanged notifications.
//
// See: VirtualSelectedParentBlueScoreChangedNotificationMessage
message NotifyVirtualSelectedParentBlueScoreChangedRequestMessage {
}

message NotifyVirtualSelectedParentBlueScoreChangedResponseMessage {
  RPCError error = 1000;
}

// VirtualSelectedParentBlueScoreChangedNotificationMessage is sent whenever the blue score
// of the virtual's selected parent changes.
//
// See NotifyVirtualSelectedParentBlueScoreChangedRequestMessage
message VirtualSelectedParentBlueScoreChangedNotificationMessage {
  uint64 virtualSelectedParentBlueScore = 1;
}

// NotifyVirtualDaaScoreChangedRequestMessage registers this connection for
// virtualDaaScoreChanged notifications.
//
// See: VirtualDaaScoreChangedNotificationMessage
message NotifyVirtualDaaScoreChangedRequestMessage {
}

message NotifyVirtualDaaScoreChangedResponseMessage {
  RPCError error = 1000;
}

// VirtualDaaScoreChangedNotificationMessage is sent whenever the DAA score
// of the virtual changes.
//
// See NotifyVirtualDaaScoreChangedRequestMessage
message VirtualDaaScoreChangedNotificationMessage {
  uint64 virtualDaaScore = 1;
}

// NotifyPruningPointUTXOSetOverrideRequestMessage registers this connection for
// pruning point UTXO set override notifications.
//
// This call is only available when this kaspad was started with `--utxoindex`
//
// See: NotifyPruningPointUTXOSetOverrideResponseMessage
message NotifyPruningPointUTXOSetOverrideRequestMessage {
}


message NotifyPruningPointUTXOSetOverrideResponseMessage {
  RPCError error = 1000;
}

// PruningPointUTXOSetOverrideNotificationMessage is sent whenever the UTXO index
// resets due to pruning point change via IBD.
//
// See NotifyPruningPointUTXOSetOverrideRequestMessage
message PruningPointUTXOSetOverrideNotificationMessage {
}

// StopNotifyingPruningPointUTXOSetOverrideRequestMessage unregisters this connection for
// pruning point UTXO set override notifications.
//
// This call is only available when this kaspad was started with `--utxoindex`
//
// See: PruningPointUTXOSetOverrideNotificationMessage
message StopNotifyingPruningPointUTXOSetOverrideRequestMessage {
}

message StopNotifyingPruningPointUTXOSetOverrideResponseMessage {
  RPCError error = 1000;
}

// BanRequestMessage bans the given ip.
message BanRequestMessage{
  string ip = 1;
}

message BanResponseMessage{
  RPCError error = 1000;
}

// UnbanRequestMessage unbans the given ip.
message UnbanRequestMessage{
  string ip = 1;
}

message UnbanResponseMessage{
  RPCError error = 1000;
}

// GetInfoRequestMessage returns info about the node.
message GetInfoRequestMessage{
}

message GetInfoResponseMessage{
  string p2pId = 1;
  uint64 mempoolSize = 2;
  string serverVersion = 3;
  bool isUtxoIndexed = 4;
  bool isSynced = 5;
  RPCError error = 1000;
}

message EstimateNetworkHashesPerSecondRequestMessage{
  uint32 windowSize = 1;
  string startHash = 2;
}

message EstimateNetworkHashesPerSecondResponseMessage{
  uint64 networkHashesPerSecond = 1;
  RPCError error = 1000;
}

// NotifyNewBlockTemplateRequestMessage registers this connection for
// NewBlockTemplate notifications.
//
// See: NewBlockTemplateNotificationMessage
message NotifyNewBlockTemplateRequestMessage {
}

message NotifyNewBlockTemplateResponseMessage {
  RPCError error = 1000;
}

// NewBlockTemplateNotificationMessage is sent whenever a new updated block template is
// available for miners.
//
// See NotifyNewBlockTemplateRequestMessage
message NewBlockTemplateNotificationMessage {
}

message MempoolEntryByAddress{
  string address = 1;
  repeated MempoolEntry sending = 2;
  repeated MempoolEntry receiving = 3;
}

message GetMempoolEntriesByAddressesRequestMessage{
  repeated string addresses = 1;
  bool includeOrphanPool = 2;
  bool filterTransactionPool = 3;
}

message  GetMempoolEntriesByAddressesResponseMessage{
  repeated MempoolEntryByAddress entries = 1;

  RPCError error = 1000;
}

message GetCoinSupplyRequestMessage{
}

message GetCoinSupplyResponseMessage{
        uint64 maxSompi = 1; // note: this is a hard coded maxSupply, actual maxSupply is expected to deviate by upto -5%, but cannot be measured exactly.
        uint64 circulatingSompi = 2;

        RPCError error = 1000;
}

// --->

message KaspadMessage {
  oneof payload {
    AddressesMessage addresses = 1;
    BlockMessage block = 2;
    TransactionMessage transaction = 3;
    BlockLocatorMessage blockLocator = 5;
    RequestAddressesMessage requestAddresses = 6;
    RequestRelayBlocksMessage requestRelayBlocks = 10;
    RequestTransactionsMessage requestTransactions = 12;
    BlockMessage ibdBlock = 13;
    InvRelayBlockMessage invRelayBlock = 14;
    InvTransactionsMessage invTransactions = 15;
    PingMessage ping = 16;
    PongMessage pong = 17;
    VerackMessage verack = 19;
    VersionMessage version = 20;
    TransactionNotFoundMessage transactionNotFound = 21;
    RejectMessage reject = 22;
    PruningPointUtxoSetChunkMessage pruningPointUtxoSetChunk = 25;
    RequestIBDBlocksMessage requestIBDBlocks = 26;
    UnexpectedPruningPointMessage unexpectedPruningPoint = 27;
    IbdBlockLocatorMessage ibdBlockLocator = 30;
    IbdBlockLocatorHighestHashMessage ibdBlockLocatorHighestHash = 31;
    RequestNextPruningPointUtxoSetChunkMessage requestNextPruningPointUtxoSetChunk = 33;
    DonePruningPointUtxoSetChunksMessage donePruningPointUtxoSetChunks = 34;
    IbdBlockLocatorHighestHashNotFoundMessage ibdBlockLocatorHighestHashNotFound = 35;
    BlockWithTrustedDataMessage blockWithTrustedData = 36;
    DoneBlocksWithTrustedDataMessage doneBlocksWithTrustedData = 37;
    RequestPruningPointAndItsAnticoneMessage requestPruningPointAndItsAnticone = 40;
    BlockHeadersMessage blockHeaders = 41;
    RequestNextHeadersMessage requestNextHeaders = 42;
    DoneHeadersMessage DoneHeaders = 43;
    RequestPruningPointUTXOSetMessage requestPruningPointUTXOSet = 44;
    RequestHeadersMessage requestHeaders = 45;
    RequestBlockLocatorMessage requestBlockLocator = 46;
    PruningPointsMessage pruningPoints = 47;
    RequestPruningPointProofMessage requestPruningPointProof = 48;
    PruningPointProofMessage pruningPointProof = 49;
    ReadyMessage ready = 50;
    BlockWithTrustedDataV4Message blockWithTrustedDataV4 = 51;
    TrustedDataMessage trustedData = 52;
    RequestIBDChainBlockLocatorMessage requestIBDChainBlockLocator = 53;
    IbdChainBlockLocatorMessage ibdChainBlockLocator = 54;
    RequestAnticoneMessage requestAnticone = 55;
    RequestNextPruningPointAndItsAnticoneBlocksMessage requestNextPruningPointAndItsAnticoneBlocks = 56;

    GetCurrentNetworkRequestMessage getCurrentNetworkRequest = 1001;
    GetCurrentNetworkResponseMessage getCurrentNetworkResponse = 1002;
    SubmitBlockRequestMessage submitBlockRequest = 1003;
    SubmitBlockResponseMessage submitBlockResponse = 1004;
    GetBlockTemplateRequestMessage getBlockTemplateRequest = 1005;
    GetBlockTemplateResponseMessage getBlockTemplateResponse = 1006;
    NotifyBlockAddedRequestMessage notifyBlockAddedRequest = 1007;
    NotifyBlockAddedResponseMessage notifyBlockAddedResponse = 1008;
    BlockAddedNotificationMessage blockAddedNotification = 1009;
    GetPeerAddressesRequestMessage getPeerAddressesRequest = 1010;
    GetPeerAddressesResponseMessage getPeerAddressesResponse = 1011;
    GetSelectedTipHashRequestMessage getSelectedTipHashRequest = 1012;
    GetSelectedTipHashResponseMessage getSelectedTipHashResponse = 1013;
    GetMempoolEntryRequestMessage getMempoolEntryRequest = 1014;
    GetMempoolEntryResponseMessage getMempoolEntryResponse = 1015;
    GetConnectedPeerInfoRequestMessage getConnectedPeerInfoRequest = 1016;
    GetConnectedPeerInfoResponseMessage getConnectedPeerInfoResponse = 1017;
    AddPeerRequestMessage addPeerRequest = 1018;
    AddPeerResponseMessage addPeerResponse = 1019;
    SubmitTransactionRequestMessage submitTransactionRequest = 1020;
    SubmitTransactionResponseMessage submitTransactionResponse = 1021;
    NotifyVirtualSelectedParentChainChangedRequestMessage notifyVirtualSelectedParentChainChangedRequest = 1022;
    NotifyVirtualSelectedParentChainChangedResponseMessage notifyVirtualSelectedParentChainChangedResponse = 1023;
    VirtualSelectedParentChainChangedNotificationMessage virtualSelectedParentChainChangedNotification = 1024;
    GetBlockRequestMessage getBlockRequest = 1025;
    GetBlockResponseMessage getBlockResponse = 1026;
    GetSubnetworkRequestMessage getSubnetworkRequest = 1027;
    GetSubnetworkResponseMessage getSubnetworkResponse = 1028;
    GetVirtualSelectedParentChainFromBlockRequestMessage getVirtualSelectedParentChainFromBlockRequest = 1029;
    GetVirtualSelectedParentChainFromBlockResponseMessage getVirtualSelectedParentChainFromBlockResponse = 1030;
    GetBlocksRequestMessage getBlocksRequest = 1031;
    GetBlocksResponseMessage getBlocksResponse = 1032;
    GetBlockCountRequestMessage getBlockCountRequest = 1033;
    GetBlockCountResponseMessage getBlockCountResponse = 1034;
    GetBlockDagInfoRequestMessage getBlockDagInfoRequest = 1035;
    GetBlockDagInfoResponseMessage getBlockDagInfoResponse = 1036;
    ResolveFinalityConflictRequestMessage resolveFinalityConflictRequest = 1037;
    ResolveFinalityConflictResponseMessage resolveFinalityConflictResponse = 1038;
    NotifyFinalityConflictsRequestMessage notifyFinalityConflictsRequest = 1039;
    NotifyFinalityConflictsResponseMessage notifyFinalityConflictsResponse = 1040;
    FinalityConflictNotificationMessage finalityConflictNotification = 1041;
    FinalityConflictResolvedNotificationMessage finalityConflictResolvedNotification = 1042;
    GetMempoolEntriesRequestMessage getMempoolEntriesRequest = 1043;
    GetMempoolEntriesResponseMessage getMempoolEntriesResponse = 1044;
    ShutDownRequestMessage shutDownRequest = 1045;
    ShutDownResponseMessage shutDownResponse = 1046;
    GetHeadersRequestMessage getHeadersRequest = 1047;
    GetHeadersResponseMessage getHeadersResponse = 1048;
    NotifyUtxosChangedRequestMessage notifyUtxosChangedRequest = 1049;
    NotifyUtxosChangedResponseMessage notifyUtxosChangedResponse = 1050;
    UtxosChangedNotificationMessage utxosChangedNotification = 1051;
    GetUtxosByAddressesRequestMessage getUtxosByAddressesRequest = 1052;
    GetUtxosByAddressesResponseMessage getUtxosByAddressesResponse = 1053;
    GetVirtualSelectedParentBlueScoreRequestMessage getVirtualSelectedParentBlueScoreRequest = 1054;
    GetVirtualSelectedParentBlueScoreResponseMessage getVirtualSelectedParentBlueScoreResponse = 1055;
    NotifyVirtualSelectedParentBlueScoreChangedRequestMessage notifyVirtualSelectedParentBlueScoreChangedRequest = 1056;
    NotifyVirtualSelectedParentBlueScoreChangedResponseMessage notifyVirtualSelectedParentBlueScoreChangedResponse = 1057;
    VirtualSelectedParentBlueScoreChangedNotificationMessage virtualSelectedParentBlueScoreChangedNotification = 1058;
    BanRequestMessage banRequest = 1059;
    BanResponseMessage banResponse = 1060;
    UnbanRequestMessage unbanRequest = 1061;
    UnbanResponseMessage unbanResponse = 1062;
    GetInfoRequestMessage getInfoRequest = 1063;
    GetInfoResponseMessage getInfoResponse = 1064;
    StopNotifyingUtxosChangedRequestMessage stopNotifyingUtxosChangedRequest = 1065;
    StopNotifyingUtxosChangedResponseMessage stopNotifyingUtxosChangedResponse = 1066;
    NotifyPruningPointUTXOSetOverrideRequestMessage notifyPruningPointUTXOSetOverrideRequest = 1067;
    NotifyPruningPointUTXOSetOverrideResponseMessage notifyPruningPointUTXOSetOverrideResponse = 1068;
    PruningPointUTXOSetOverrideNotificationMessage pruningPointUTXOSetOverrideNotification = 1069;
    StopNotifyingPruningPointUTXOSetOverrideRequestMessage stopNotifyingPruningPointUTXOSetOverrideRequest = 1070;
    StopNotifyingPruningPointUTXOSetOverrideResponseMessage stopNotifyingPruningPointUTXOSetOverrideResponse = 1071;
    EstimateNetworkHashesPerSecondRequestMessage estimateNetworkHashesPerSecondRequest = 1072;
    EstimateNetworkHashesPerSecondResponseMessage estimateNetworkHashesPerSecondResponse = 1073;
    NotifyVirtualDaaScoreChangedRequestMessage notifyVirtualDaaScoreChangedRequest = 1074;
    NotifyVirtualDaaScoreChangedResponseMessage notifyVirtualDaaScoreChangedResponse = 1075;
    VirtualDaaScoreChangedNotificationMessage virtualDaaScoreChangedNotification = 1076;
    GetBalanceByAddressRequestMessage getBalanceByAddressRequest = 1077;
    GetBalanceByAddressResponseMessage getBalanceByAddressResponse = 1078;
    GetBalancesByAddressesRequestMessage getBalancesByAddressesRequest = 1079;
    GetBalancesByAddressesResponseMessage getBalancesByAddressesResponse = 1080;
    NotifyNewBlockTemplateRequestMessage notifyNewBlockTemplateRequest = 1081;
    NotifyNewBlockTemplateResponseMessage notifyNewBlockTemplateResponse = 1082;
    NewBlockTemplateNotificationMessage newBlockTemplateNotification = 1083;
    GetMempoolEntriesByAddressesRequestMessage getMempoolEntriesByAddressesRequest = 1084;
    GetMempoolEntriesByAddressesResponseMessage getMempoolEntriesByAddressesResponse = 1085;
    GetCoinSupplyRequestMessage getCoinSupplyRequest = 1086;
    GetCoinSupplyResponseMessage getCoinSupplyResponse= 1087;
  }
}

service P2P {
  rpc MessageStream (stream KaspadMessage) returns (stream KaspadMessage) {}
}

service RPC {
  rpc MessageStream (stream KaspadMessage) returns (stream KaspadMessage) {}
}
